BMCV Lib Interface
=================================

BMCV library provide image processing interface based on NPU. With powerful parallel processing mechanism of NPU, images can be processed faster. 

Common Structure
-------------------------

Common structures are defined in BMCV library, they are used in image processing application interfaces:

    .. code-block:: c 

        #define MAX_BMCV_IMAGE_CHANNEL 4

        typedef enum bmcv_data_format_{
            DATA_TYPE_FLOAT = 0,  // data type is 32 bit float
            DATA_TYPE_BYTE = 4  // data type is 8 bit
        }bmcv_data_format;


        typedef enum bmcv_color_space_{
            COLOR_YUV,  // color space is yuv
            COLOR_YCbCr, // color space is YCbCr
            COLOR_RGB  // color space is rgb
        }bmcv_color_space;


        typedef enum bmcv_image_format_{
            YUV420P,  // data is in YUV420 packed format
            NV12,  // data is in NV12 format
            NV21,  // data is in NV21 format
            RGB,  // data is in RGB planar format
            BGR,  // data is in BGR planar format
            RGB_PACKED, // data is in RGB packed format
            BGR_PACKED, // data is in BGR packed format
            BGR4N  // data is in BGR 4N mode, for future use
        }bmcv_image_format;


        typedef struct bmcv_image_t{
            bmcv_color_space color_space;  // color space of the image
            bmcv_data_format data_format;  // data format of the image
            bmcv_image_format image_format;  // image format of the image
            int              image_width;  // image width in pixel
            int              image_height;  // image height in pixel
            bm_device_mem_t  data[MAX_BMCV_IMAGE_CHANNEL]; // address of image data, may contain Y and UV channels in NV12 and YUV420P format; and R, G, B in RGB/BGR format, usually set the start address is enough
            int              stride[MAX_BMCV_IMAGE_CHANNEL]; // stride of the image data
        }bmcv_image;


bmcv_img_yuv2bgr
-------------------------

This function is for converting NV12 data to BGR planar data

    .. code-block:: c

	bm_status_t bm_img_yuv2bgr(
            bm_handle_t      handle,    //input
            bmcv_image       input,     //output
            bmcv_image       output);

Parameter Descriptions

    ==============   ==================
    **Parameter**    **Memo**
    ==============   ==================
    handle           Context handle when bmcv init
    input            Input image description structure, support NV12 in input data format and YUV and YCbCr in color space
    ouput            Output image description structure, support BGR planar/packed and RGB planar/packed data format and float or byte data type
    ==============   ==================

bmcv_img_crop
--------------------------

This function is to crop from existing image to create a new image.

    .. code-block:: c
	
	bm_status_t bmcv_img_crop(
            bm_handle_t      handle,
            bmcv_image       input,
            int              input_c,
            int              top,
            int              left,
            bmcv_image       output);
	
Parameter Descriptions

    ==============    ====================================
    **Parameter**      **Memo**
    ==============    ====================================
    handle             Context handle when bmcv init
    input              Input image description structure, support BGR planar and RGB planar data format, BGR will not re-order to RGB or vise verse even input data format and output data format is not aligned, input data type can be float or byte
    input_c            Number of color channels in input, may be 1 or 3, output color channel is 1 or 3 accordingly
    top                Vertical starting point of crop, the original of image is top left of the image, in pixel
    left               Horizental starting point of crop, the original of image is top left of the image, in pixel
    ouput              Output image description structure
    ==============    ====================================
	

bmcv_img_scale
--------------------------

This function is to resize the image, with crop and convert function to the image.

    .. code-block:: c
	
	bm_status_t bmcv_img_scale(
            bm_handle_t handle,
            bmcv_image input,
            int n, int do_crop, int top, int left, int height, int width,
            unsigned char stretch, unsigned char padding_b, unsigned char padding_g, unsigned char padding_r,
            int pixel_weight_bias,
            float weight_b, float bias_b,
            float weight_g, float bias_g,
            float weight_r, float bias_r,
            bmcv_image output);
		
Parameter Descriptions

    +-----------------+-----------------------------------------+
    |**Parameter**    |**Memo**                                 |
    +=================+=========================================+
    |handle           |Context handle when bmcv init            |
    +-----------------+-----------------------------------------+
    |input            |Input image description structure,       |
    |                 |support BGR planar and RGB planar data   |
    |                 |format, support float and byte in data   |
    |                 |type                                     |
    +-----------------+-----------------------------------------+
    |n                |Number of images to process, only        |
    |                 |support 1 in current version             |
    +-----------------+-----------------------------------------+
    |do_crop          |To crop or not:                          |
    |                 |                                         |
    |                 |  0: no crop, following 4 position       |
    |                 |  parameters will be omitted             |
    |                 |                                         |
    |                 |  1: with crop, following 4 position     |
    |                 |  parameter indicate the position        |
    |                 |  and size                               |
    +-----------------+-----------------------------------------+
    |top              |Vertical start position of crop          |
    +-----------------+-----------------------------------------+
    |left             |Horizental start position of crop        |
    +-----------------+-----------------------------------------+
    |height           |Height to crop, in pixel                 |
    +-----------------+-----------------------------------------+
    |width            |Width of crop, in pixel                  |
    +-----------------+-----------------------------------------+
    |stretch          |resize mode:                             |
    |                 |                                         |
    |                 |  0: resize in fit mode, keep the ratio  |
    |                 |  of width and height, the spare space   |
    |                 |  will be filled with following color    |
    |                 |  channel value                          |
    |                 |                                         |
    |                 |  1:stretch mode, fill the object size   |
    +-----------------+-----------------------------------------+
    |padding_b        |Blue value to fill spare space in fit    |
    |                 |mode, 0-255 byte, if output is byte      |
    |                 |format or float without normalize,       |
    |                 |padding with the value, if output is     |
    |                 |float with normalize, the value is       |
    |                 |normalized.                              |
    +-----------------+-----------------------------------------+
    |padding_g        |Green value to fill spare space in fit   |
    |                 |mode, 0-255 byte, if output is byte      |
    |                 |format or float without normalize,       |
    |                 |padding with the value, if output is     |
    |                 |float with normalize, the value is       |
    |                 |normalized.                              |
    +-----------------+-----------------------------------------+
    |padding_r        |Red value to fill spare space in fit     |
    |                 |mode, 0-255 byte, if output is byte      |
    |                 |format or float without normalize,       |
    |                 |padding with the value, if output is     |
    |                 |float with normalize, the value is       |
    |                 |normalized.                              |
    +-----------------+-----------------------------------------+
    |pixel_weight_bias|If convert the output image:             |
    |                 |                                         |
    |                 |  0:no convert to output, following bias |
    |                 |  and weight parameters are omitted      |
    |                 |                                         |
    |                 |  1:convert the output                   |
    +-----------------+-----------------------------------------+
    |weight_b         |Weight of blue channel                   |
    +-----------------+-----------------------------------------+
    |bias_b           |Bias of blue channel                     |
    +-----------------+-----------------------------------------+
    |weight_g         |Weight of green channel                  |
    +-----------------+-----------------------------------------+
    |bias_g           |Bias of green channel                    |
    +-----------------+-----------------------------------------+
    |weight_r         |Weight of red channel                    |
    +-----------------+-----------------------------------------+
    |bias_r           |Bias of red channel                      |
    +-----------------+-----------------------------------------+
    |ouput            |Output image description structure       |
    +-----------------+-----------------------------------------+


bmcv_img_transpose
--------------------------

This function is to transpose the image.

    .. code-block:: c

	bm_status_t bmcv_img_transpose(
            bm_handle_t     handle,
	    bmcv_image	    input,
	    bmcv_image	    output);

Parameter Descriptions

    ===============    =====================
     **Parameter**      **Memo**
    ===============    =====================
     handle             Context handle when bmcv init
     input              Input image description structure, support BGR planar and RGB planar data format, and float and byte in data type
     ouput              Output image description structure, support BGR planar and RGB planar in data format, support float and byte in data type, BGR channel sequence unchanged
    ===============    =====================

	
bmcv_img_bgrsplit
--------------------------

This function is to convert packed bgr image data to bgr planar data format.

    .. code-block:: c
	
	bm_status_t bmcv_img_bgrsplit(
            bm_handle_t     handle,
            bmcv_image	    input,
            bmcv_image	    output);

Parameter Descriptions
	
    +--------------+-----------------------------------------+
    | **Parameter**|**Memo**                                 |
    +==============+=========================================+
    |handle        |Context handle when bmcv init            |
    +--------------+-----------------------------------------+
    |input         |Input image description structure,       |
    |              |support BGR packed and RGB packed data   |
    |              |format, and float and byte in data type  |
    +--------------+-----------------------------------------+
    |ouput         |Output image description structure,      |
    |              |support BGR planar and RGB planar in     |
    |              |data format, support float and byte in   |
    |              |data type, BGR channel sequence unchanged|
    +--------------+-----------------------------------------+
